diff --git a/bitbake/lib/bb/cookerdata.py b/bitbake/lib/bb/cookerdata.py
index 0649e40995..1f6da06c47 100644
--- a/bitbake/lib/bb/cookerdata.py
+++ b/bitbake/lib/bb/cookerdata.py
@@ -300,6 +300,43 @@ class CookerDataBuilder(object):
 
         bb.codeparser.update_module_dependencies(self.data)
 
+        import socket
+        mirrors = self.data.getVar('SSTATE_MIRRORS')
+        parts = mirrors.split()
+        mirrors_list = [' '.join(parts[i:i+2]) for i in range(0, len(parts), 2)]
+
+        def is_port_open(address, port, timeout=1):
+            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
+                sock.settimeout(timeout)
+                result = sock.connect_ex((address, port))
+                return result == 0
+
+        def extract_address_and_port(url):
+            protocol_end = url.find('://')
+            if protocol_end == -1:
+                return None, None
+            address_start = protocol_end + 3
+            address_end = url.find(':', address_start)
+            if address_end == -1:
+                return None, None
+            address = url[address_start:address_end]
+            port_end = url.find('/', address_end)
+            if port_end == -1:
+                port_end = url.find(';', address_end)
+            if port_end == -1:
+                return None, None
+            port = int(url[address_end + 1:port_end])
+            return address, port
+
+        filtered_result = []
+        for item in mirrors_list:
+            url = item.split()[1]
+            address, port = extract_address_and_port(url)
+            if address and port and is_port_open(address, port):
+                filtered_result.append(item)               
+        output_string = ' '.join(filtered_result)
+        self.data.setVar('SSTATE_MIRRORS', output_string)
+
         # Handle obsolete variable names
         d = self.data
         renamedvars = d.getVarFlags('BB_RENAMED_VARIABLES') or {}
