--- poky/bitbake/lib/bb/cache.py	2024-06-25 12:55:14.927976130 +0300
+++ poky/bitbake/lib/bb/cache.py	2024-06-25 13:20:16.011004514 +0300
@@ -17,6 +17,7 @@
 #
 
 import os
+import time
 import logging
 import pickle
 from collections import defaultdict
@@ -405,6 +406,7 @@
         self.cacheclean = True
         self.data_hash = data_hash
         self.filelist_regex = re.compile(r'(?:(?<=:True)|(?<=:False))\s+')
+        self.log_file = open('recipe_parsing_time.log', 'a')
 
         if self.cachedir in [None, '']:
             bb.fatal("Please ensure CACHE is set to the cache directory for BitBake to use")
@@ -515,6 +517,7 @@
     def parse(self, filename, appends, layername):
         """Parse the specified filename, returning the recipe information"""
         self.logger.debug("Parsing %s", filename)
+        start_time = time.time()
         infos = []
         datastores = self.databuilder.parseRecipeVariants(filename, appends, mc=self.mc, layername=layername)
         depends = []
@@ -535,7 +538,8 @@
                 info = cache_class(filename, data)
                 info_array.append(info)
             infos.append((virtualfn, info_array))
-
+        end_time = time.time()
+        self.log_file.write(f'{filename}: {end_time - start_time:.2f} seconds\n')
         return infos
 
     def loadCached(self, filename, appends):
--- poky/create_parsing_info.py	1970-01-01 03:00:00.000000000 +0300
+++ poky/create_parsing_info.py	2024-06-25 13:21:20.616528879 +0300
@@ -0,0 +1,37 @@
+def parse_recipe_times(file_path):
+    layer_times = {}
+
+    with open(file_path, 'r') as file:
+        for line in file:
+            recipe_path, time_str = line.split(':')
+            parse_time = float(time_str.split()[0])
+
+            parts = recipe_path.split('/')
+            layer_index = None
+            for i, part in enumerate(parts):
+                if 'meta' in part:
+                    layer_index = i
+                    break
+
+            layer = parts[layer_index] if layer_index and layer_index < len(parts) else 'unknown'
+
+            if layer in layer_times:
+                layer_times[layer] += parse_time
+            else:
+                layer_times[layer] = parse_time
+
+    return layer_times
+
+
+def write_layer_times(layer_times, output_file):
+    with open(output_file, 'w') as file:
+        for layer, time in layer_times.items():
+            file.write(f'{layer}: {time:.2f} seconds\n')
+
+
+if __name__ == '__main__':
+    input_file = 'build/recipe_parsing_time.log'
+    output_file = 'build/layer_parsing_time.log'
+
+    layer_times = parse_recipe_times(input_file)
+    write_layer_times(layer_times, output_file)
