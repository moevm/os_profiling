--- runqueue.py	(revision e665be2ad94b736d5a07395303fd71937c021ee8)
+++ runqueue.py	(date 1728232264903)
@@ -162,6 +162,13 @@
         self.rev_prio_map = None
         self.is_pressure_usable()
 
+        self.max_limit_receive_diff = None
+        self.max_limit_transmit_diff = None
+        self.max_net_pressure = None
+        self.count_do_fetch = 0
+        self.max_count_do_fetch = 13
+        self.net_pressure_statistics = []
+
     def is_pressure_usable(self):
         """
         If monitoring pressure, return True if pressure files can be open and read. For example
@@ -231,6 +238,25 @@
             self.loadfactor_limit = limit
             return limit
         return False
+
+    def exceeds_max_net(self):
+        if self.max_net_pressure is None:
+            return False
+        try:
+            with open('net_pressure.log', 'r') as f:
+                receive_diff, transmit_diff = [int(elem) for elem in f.readline().split()]
+                if receive_diff > self.max_net_pressure[0] or transmit_diff > self.max_net_pressure[1]:
+                    return True
+        # only in the beginning there's no net_pressure.log, at the start pressure is low
+        except FileNotFoundError:
+            return False
+        return False
+
+    def set_max_net_pressure(self):
+        if os.path.isfile('current_max_net_pressure.log'):
+            with open('current_max_net_pressure.log', 'r') as f:
+                max_receive_diff, max_transmit_diff = [int(elem) for elem in f.readline().split()]
+                self.max_net_pressure = (max_receive_diff, max_transmit_diff)
 
     def next_buildable_task(self):
         """
@@ -288,9 +314,15 @@
                 stamp = self.stamps[tid]
                 if stamp in self.rq.build_stamps.values():
                     continue
+                if self.exceeds_max_net():
+                    if taskname == "do_fetch":
+                        continue
+                    if taskname == "do_compile":
+                        return tid
                 bestprio = prio
                 best = tid
-
+        if not self.max_net_pressure:
+            self.set_max_net_pressure()
         return best
