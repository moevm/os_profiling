--- a/bitbake/lib/bb/runqueue.py
+++ b/bitbake/lib/bb/runqueue.py
@@ -187,6 +187,62 @@ class RunQueueScheduler(object):
         else:
             self.check_pressure = False
 
+    def is_net_pressure_usable(self, iface):
+            try:
+                with open("/proc/net/dev") as net_pressure_fds:
+                    self.prev_received_bytes, self.prev_transmitted_bytes = map(float, next((line.split()[1], line.split()[9]) for line in net_pressure_fds if iface in line))
+                    self.prev_net_pressure_time = time.time()
+                if not hasattr(self, "prev_received_bytes") or not hasattr(self, "prev_transmitted_bytes"):
+                    self.iface_limit = None
+                    return
+                self.check_net_pressure = True
+                try:
+                    self.countdown_net_limit = int(self.rq.cfgData.getVar("NET_TASKS_BEFORE_LIMIT"))
+                    bb.note(f"Set num net task before limit = {self.countdown_net_limit}")
+                except:
+                    self.countdown_net_limit = 40
+                    bb.warn(f"Wrong NET_TASKS_BEFORE_LIMIT value! NET_TASKS_BEFORE_LIMIT must be int. Set default num net task before limit = {self.countdown_net_limit}")
+            except:
+                bb.note("The /proc/net/dev files can't be read or wrong iface. Continuing build without monitoring pressure")
+                self.iface_limit = None
+
+
+
+    def take_net_pressure(self, iface):
+        if  self.iface_limit and not hasattr(self, 'check_net_pressure'):
+            self.is_net_pressure_usable(iface)
+            return
+
+        if not self.check_net_pressure:
+            return
+
+        with open("/proc/net/dev", "r") as net_pressure_fds:
+            curr_received_bytes, curr_transmitted_bytes = map(float, next((line.split()[1], line.split()[9]) for line in net_pressure_fds if iface in line))
+            now = time.time()
+            tdiff = now - self.prev_net_pressure_time
+            self.net_received_pressure = (curr_received_bytes - self.prev_received_bytes) / tdiff
+            self.net_transmitted_pressure = (curr_transmitted_bytes - self.prev_transmitted_bytes) / tdiff
+
+            if tdiff > 1:
+                self.prev_received_bytes = curr_received_bytes
+                self.prev_transmitted_bytes = curr_transmitted_bytes
+                self.prev_net_pressure_time = now
+
+            if hasattr(self, "max_net_received_pressure"):
+                self.max_net_received_pressure = max(self.max_net_received_pressure, self.net_received_pressure)
+                self.max_net_transmitted_pressure = max(self.max_net_transmitted_pressure, self.net_transmitted_pressure)
+
+            else:
+                self.max_net_received_pressure = self.net_received_pressure
+                self.max_net_transmitted_pressure = self.net_transmitted_pressure
+
+    def net_excess(self):
+        if not hasattr(self, "max_net_pressure"):
+            return False
+        if self.net_received_pressure > self.max_net_pressure[0] or self.net_transmitted_pressure > self.max_net_pressure[1]:
+            return True
+        return False
+
     def exceeds_max_pressure(self):
         """
         Monitor the difference in total pressure at least once per second, if
@@ -252,6 +308,12 @@ class RunQueueScheduler(object):
         if self.rq.stats.active and self.exceeds_max_pressure():
             return None
 
+        if not hasattr(self, "iface_limit"):
+            self.iface_limit = self.rq.cfgData.getVar("BB_IFACE_LIMIT") or None
+
+        if self.iface_limit:
+            self.take_net_pressure(self.iface_limit)
+
         # Filter out tasks that have a max number of threads that have been exceeded
         skip_buildable = {}
         for running in self.rq.runq_running.difference(self.rq.runq_complete):
@@ -285,8 +347,19 @@ class RunQueueScheduler(object):
             prio = self.rev_prio_map[tid]
             if bestprio is None or bestprio > prio:
                 taskname = taskname_from_tid(tid)
+                ### Countdown_net_limit do_fetch task launches before setting the network limit ###
+                if hasattr(self, 'countdown_net_limit') and self.countdown_net_limit > 0 and not hasattr(self, 'max_net_pressure'):
+                    if taskname == "do_fetch":
+                        self.countdown_net_limit -= 1
+                elif self.iface_limit and not hasattr(self, 'max_net_pressure'):
+                    self.max_net_pressure = (self.max_net_received_pressure, self.max_net_transmitted_pressure)
+
                 if taskname in skip_buildable and skip_buildable[taskname] >= int(self.skip_maxthread[taskname]):
                     continue
+                if self.iface_limit and self.net_excess():
+                    if taskname == "do_fetch":
+                        continue
+
                 stamp = self.stamps[tid]
                 if stamp in self.rq.build_stamps.values():
                     continue
