diff --git a/bitbake/lib/bb/runqueue.py b/bitbake/lib/bb/runqueue.py
index ffb2d28494..2d1d48d074 100644
--- a/bitbake/lib/bb/runqueue.py
+++ b/bitbake/lib/bb/runqueue.py
@@ -187,6 +187,45 @@ class RunQueueScheduler(object):
         else:
             self.check_pressure = False
 
+    def is_net_pressure_usable(self, iface):
+            try:
+                with open("/proc/net/dev") as net_pressure_fds:
+                    self.prev_received_bytes, self.prev_transmitted_bytes = next((line.split()[1], line.split()[9]) for line in net_pressure_fds if iface in line)
+                    self.prev_net_pressure_time = time.time()
+                if not hasattr(self, "prev_received_bytes") or not hasattr(self, "prev_transmitted_bytes"):
+                    self.iface_limit = None
+                    return
+                self.check_net_pressure = True
+            except:
+                bb.note("The /proc/net/dev files can't be read or wrong iface. Continuing build without monitoring pressure")
+                self.iface_limit = None
+
+    def take_net_pressure(self, iface):
+        if  self.iface_limit and not hasattr(self, 'check_net_pressure'):
+            self.is_net_pressure_usable(iface)
+            return
+
+        if not self.check_net_pressure:
+            return
+
+        with open("/proc/net/dev", "r") as net_pressure_fds:
+            curr_received_bytes, curr_transmitted_bytes = map(float, next((line.split()[1], line.split()[9]) for line in net_pressure_fds if iface in line))
+            now = time.time()
+            tdiff = now - self.prev_net_pressure_time
+            self.net_received_pressure = (curr_received_bytes - float(self.prev_received_bytes)) / tdiff
+            self.net_transmitted_pressure = (curr_transmitted_bytes - float(self.prev_transmitted_bytes)) / tdiff
+            if tdiff > 1:
+                self.prev_received_bytes = curr_received_bytes
+                self.prev_transmitted_bytes = curr_transmitted_bytes
+                self.prev_net_pressure_time = now
+
+    def net_excess(self):
+        if not hasattr(self, "net_received_pressure") or not hasattr(self, "net_transmitted_pressure"):
+            return False
+        if self.net_received_pressure < self.iface_limit_received or self.net_transmitted_pressure < self.iface_limit_transmitted:
+            return False
+        return True
+
     def exceeds_max_pressure(self):
         """
         Monitor the difference in total pressure at least once per second, if
@@ -252,6 +291,23 @@ class RunQueueScheduler(object):
         if self.rq.stats.active and self.exceeds_max_pressure():
             return None
 
+        if not hasattr(self, "iface_limit"):
+            self.iface_limit = self.rq.cfgData.getVar("BB_IFACE_LIMIT") or None
+            if not self.iface_limit or len(self.iface_limit.split()) != 3:
+                bb.note('BB_IFACE_LIMIT must be set to "<IFACE> <VALUE_received> <VALUE_transmitted>". Continuing build without monitoring pressure')
+                self.iface_limit, self.iface_limit_received, self.iface_limit_transmitted = None, None, None
+            elif self.iface_limit:
+                self.iface_limit, self.iface_limit_received, self.iface_limit_transmitted = self.iface_limit.split()
+                try:
+                    self.iface_limit_received = int(self.iface_limit_received)
+                    self.iface_limit_transmitted = int(self.iface_limit_transmitted)
+                except:
+                    bb.note('The second and the third values in BB_IFACE_LIMIT must be int. Continuing build without monitoring pressure')
+                    self.iface_limit, self.iface_limit_received, self.iface_limit_transmitted = None, None, None
+
+        if self.iface_limit:
+            self.take_net_pressure(self.iface_limit)
+
         # Filter out tasks that have a max number of threads that have been exceeded
         skip_buildable = {}
         for running in self.rq.runq_running.difference(self.rq.runq_complete):
@@ -279,9 +335,16 @@ class RunQueueScheduler(object):
             for tid in self.rqdata.runtaskentries:
                 self.rev_prio_map[tid] = self.prio_map.index(tid)
 
+        contain_not_only_do_fetch = any("do_fetch" not in task for task in buildable)
+        net_excess = self.net_excess()
+
         best = None
         bestprio = None
         for tid in buildable:
+            if self.iface_limit and contain_not_only_do_fetch and net_excess:
+                taskname = taskname_from_tid(tid)
+                if taskname == "do_fetch":
+                    continue
             prio = self.rev_prio_map[tid]
             if bestprio is None or bestprio > prio:
                 taskname = taskname_from_tid(tid)
